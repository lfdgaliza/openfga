# Important: Super admin is a business concept, not a technical one.
# This is something defined by the configuration, not by OpenFGA.
# This example shows a way, like a design pattern, to define a super admin in OpenFGA.

model: |
  model
    schema 1.1

  type user

  type system
    relations
      define super_admin: [user with time_based_grant]

  type org
    relations
      # Add relationship between org and system
      define system: [system]
      # super_admin is a user who has admin rights over the org
      define admin: [user] or super_admin from system

      define can_edit_folders: admin

  type group
    relations
      define member: [user, group#member]

  type folder
    relations
      define tenant: [org]
      define parent: [folder]
      define owner: [user]
      # this way we can assign groups to folders. The #member means that all members of the group can view the folder.
      define viewer: [user, group#member] 
      define editor: [user, group#member]

      define can_view: viewer or can_edit
      define can_edit: owner or editor or can_edit from parent or can_edit_folders from tenant

  type document
    relations
      define owner: [user]
      define parent: [folder]
      define viewer: [user, group#member, user:*]
      define editor: [user, group#member]

      define published: [document]

      define can_edit: owner or editor or can_edit from parent
      define can_view: (viewer and viewer from published) or can_edit

  condition time_based_grant(current_time: timestamp, grant_time: timestamp, grant_duration: duration) {
      current_time < grant_time + grant_duration
  }

tuples:
  ### Tuples for basic example
  # Anne is the owner of the root folder
  - user: user:anne
    object: folder:root
    relation: owner
  
  - user: folder:root
    object: document:welcome
    relation: parent

  # Bob is the owner of the document:welcome
  - user: user:bob
    object: document:welcome
    relation: owner

  ### Tuples for multi-tenancy example
  # Peter is an admin of the org:acme
  # and Peter can edit the root folder of the org:acme
  - user: user:peter
    object: org:acme
    relation: admin

  - user: org:acme
    object: folder:root
    relation: tenant

  ### Tuples for groups example
  # Martin is a member of the engineering group
  # and the engineering group is a member of the everyone group
  # and all members of the everyone group can edit the root folder
  - user: user:martin
    object: group:engineering
    relation: member

  - user: group:engineering#member
    object: group:everyone
    relation: member

  - user: group:everyone#member
    object: folder:root
    relation: editor

  ### Tuple for public access example
  - user: user:*
    object: document:public-roadmap
    relation: viewer

  ### Tuples for Relationship-based ABAC
  - user: folder:root
    object: document:document-not-published
    relation: parent

  - user: user:*
    object: document:document-not-published
    relation: viewer

  - user: document:public-roadmap
    object: document:public-roadmap
    relation: published

  ### Tuples for super-admin example and conditional relationships
  - user: user:sam
    object: system:root
    relation: super_admin
    condition: # This is now a necessary configuration to define the super admin
      name: time_based_grant
      context:
        grant_time: "2023-01-01T00:00:00Z"
        grant_duration: 1h

  - user: system:root
    object: org:acme
    relation: system

tests:
  - name: Tests for basic example
    check:
      - user: user:anne
        object: document:welcome
        assertions:
          can_edit: true
          can_view: true

      - user: user:bob
        object: folder:root
        assertions:
          can_edit: false
          can_view: false

  - name: Tests for multi-tenancy
    check:
      - user: user:peter
        object: folder:root
        assertions:
          can_edit: true
          can_view: true

      - user: user:peter
        object: document:welcome
        assertions:
          can_edit: true
          can_view: true

  - name: Tests for groups
    check:
      - user: user:martin
        object: document:welcome
        assertions:
          can_edit: true
          can_view: true

      - user: user:martin
        object: folder:root
        assertions:
          can_edit: true
          can_view: true

  - name: Tests for public access
    check:
      - user: user:john
        object: document:public-roadmap
        assertions:
          can_edit: false
          can_view: true

  - name: Tests for published documents
    check:
      - user: user:john
        object: document:document-not-published
        assertions:
          can_edit: false
          can_view: false

      - user: user:peter
        object: document:document-not-published
        assertions:
          can_edit: true
          can_view: true

  - name: Tests for super-admin example with conditional relationships
    check:
      - user: user:sam
        object: document:welcome
        context:
          current_time: "2023-01-01T00:30:00Z"
        assertions:
          can_edit: true
          can_view: true
      - user: user:sam
        object: document:welcome
        context:
          current_time: "2023-01-01T01:00:00Z"
        assertions:
          can_edit: false
          can_view: false